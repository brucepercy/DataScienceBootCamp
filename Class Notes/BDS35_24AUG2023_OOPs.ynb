{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOfuYaXM5I86ubt1APA/1Oh"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"markdown","source":["#**Thursday August 24, 2023**"],"metadata":{"id":"DNj1nvTLATFE"}},{"cell_type":"markdown","source":["    1. Over Loading\n","    2. Over Ridding\n","    3. Operator Over Loading\n","    4. Polymorphism\n","    5. Encapsulation"],"metadata":{"id":"zvpwPR4GAcgj"}},{"cell_type":"code","source":["print(10 + 12)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"vlDkRJPLAZDL","executionInfo":{"status":"ok","timestamp":1692922200969,"user_tz":-330,"elapsed":10,"user":{"displayName":"ANUURAG EDLABADKAR","userId":"12818751978099284458"}},"outputId":"c0a21e62-c8a0-4c8f-c708-45a9e548aee3"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["22\n"]}]},{"cell_type":"code","source":["print(3.1415 + 3.1415)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"cKObnDPLBv0u","executionInfo":{"status":"ok","timestamp":1692922232971,"user_tz":-330,"elapsed":6,"user":{"displayName":"ANUURAG EDLABADKAR","userId":"12818751978099284458"}},"outputId":"1c5db294-0944-4c95-cdee-3462e42cd8ea"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["6.283\n"]}]},{"cell_type":"code","source":["print('Python'+'Programming')"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"b0HVlQ1ZB3CM","executionInfo":{"status":"ok","timestamp":1692922264002,"user_tz":-330,"elapsed":418,"user":{"displayName":"ANUURAG EDLABADKAR","userId":"12818751978099284458"}},"outputId":"d3adf6bc-6b24-4609-dffa-1b7fc6641838"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["PythonProgramming\n"]}]},{"cell_type":"code","source":["print([12,23,34,45] + [56,67,78,89,90])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"_aF1gf4wCA8U","executionInfo":{"status":"ok","timestamp":1692922319042,"user_tz":-330,"elapsed":7,"user":{"displayName":"ANUURAG EDLABADKAR","userId":"12818751978099284458"}},"outputId":"f08170eb-11d9-4da8-a3c2-2620c8501c73"},"execution_count":null,"outputs":[{"output_type":"stream","name":"stdout","text":["[12, 23, 34, 45, 56, 67, 78, 89, 90]\n"]}]},{"cell_type":"code","execution_count":null,"metadata":{"id":"y6N2pb5rCoQl"},"outputs":[],"source":["\n","str = \"Python Programming\"\n","print(len(str))\n","\n","str = [12,12,23,34,45,56,57,68,54,54,34,34,23]\n","print(len(str))\n","\n","str = (12,12,23,34,45,56,57,68,54,54,34,34,23)\n","print(len(str))\n","\n","str ={'a' : 'apple',\n","      'b' : 'banana',\n","      'c' : 'cherries'}\n","print(len(str))"]},{"cell_type":"code","source":["class person: # Parent class\n","  def __init__(self, fname, mname, lname):\n","    pass;\n","  def print_details(self):\n","    print(self.fname, self.mname, self.lname)\n","\n","class student(person): # Child class\n","  def __init__(self, fname, mname, lname):\n","    pass;\n","  def print_details(self):\n","    print(self.fname, self.mname, self.lname)"],"metadata":{"id":"HKN9fZJkELBq","executionInfo":{"status":"ok","timestamp":1692922973617,"user_tz":240,"elapsed":100,"user":{"displayName":"Bruce Johnson","userId":"00953885078033609605"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","source":["class Car:\n","  def __init__(self, brand, model):\n","    self.brand = brand\n","    self.model = model\n","\n","  def move(self):\n","    print(\"Drive!\")\n","\n","class Boat:\n","  def __init__(self, brand, model):\n","    self.brand = brand\n","    self.model = model\n","\n","  def move(self):\n","    print(\"Sail!\")\n","\n","class Plane:\n","  def __init__(self, brand, model):\n","    self.brand = brand\n","    self.model = model\n","\n","  def move(self):\n","    print(\"Fly!\")\n","\n","car1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\n","boat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\n","plane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\n","\n","for x in (car1, boat1, plane1):\n","  x.move()"],"metadata":{"id":"5T2PQHgVEvhq"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class vehicle:\n","  def __init__(self, brand, model):\n","    self.brand = brand\n","    self.model = model\n","\n","# each object of the child classes can be treated\n","# as an object of the parent class.\n","\n","  def move(self):\n","    print('move!!')\n","\n","class Car(vehicle):\n","  def move(self):\n","    print(\"Drive!\")\n","\n","class Boat(vehicle):\n","  def move(self):\n","    print(\"Sail!\")\n","\n","class Plane(vehicle):\n","  def move(self):\n","    print(\"Fly!\")\n","\n","car1 = Car(\"Ford\", \"Mustang\")       #Create a Car class\n","boat1 = Boat(\"Ibiza\", \"Touring 20\") #Create a Boat class\n","plane1 = Plane(\"Boeing\", \"747\")     #Create a Plane class\n","\n","for i in (car1,boat1,plane1):\n","  print(i.brand)\n","  print(i.model)\n","  i.move()"],"metadata":{"id":"60i_xuCnLErp"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["class Animal: # Parent class\n","  def __init__(self, name):\n","      self.name = name\n","\n","  def speak(self):\n","      print(\"sound\")\n","\n","class Dog(Animal):\n","  def speak(self):\n","    print(\"Woof!\")\n","\n","class Cat(Animal):\n","  def speak(self):\n","    print(\"Meow!\")\n","\n","class Duck(Animal):\n","  def speak(self):\n","    print(\"Quack!\")\n","\n","dog = Dog(\"Rocky\")\n","cat = Cat(\"Simba\")\n","duck = Duck(\"Dixie\")\n","\n","# Creating an object\n","animals = [dog, cat, duck]\n","\n","for animal in animals:\n","  print(animal.name)\n","  print(animal.speak())"],"metadata":{"id":"9iDKqJ2cQwq8"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":[],"metadata":{"id":"FScLFlHUSRev"},"execution_count":null,"outputs":[]}]}